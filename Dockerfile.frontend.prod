# Stage 1: Build the React app
FROM node:20-alpine AS build
WORKDIR /app

COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Stage 2: Serve the built assets with NGINX
FROM nginx:alpine

# Copy built frontend and custom NGINX config
COPY --from=build /app/build /usr/share/nginx/html
COPY nginx/default.conf.template /etc/nginx/conf.d/default.conf.template
COPY nginx/nginx.conf /etc/nginx/nginx.conf

# Create a startup script that will handle the template substitution
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'envsubst "$DOMAIN $NGINX_BACKEND_UPSTREAM" < /etc/nginx/conf.d/default.conf.template > /tmp/default.conf' >> /docker-entrypoint.sh && \
    echo 'cp /tmp/default.conf /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.sh && \
    echo 'nginx -g "pid /tmp/nginx.pid; daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Ensure cache directories exist and have proper ownership
RUN mkdir -p /var/cache/nginx /tmp && \
    chown -R nginx:nginx /usr/share/nginx /var/cache/nginx /etc/nginx /tmp

# Drop to non-root user
USER nginx

EXPOSE 80

# Use our custom entrypoint script
CMD ["/docker-entrypoint.sh"]